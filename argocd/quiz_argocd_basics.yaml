id: argocd_basics
category: argocd
level: beginner
title: ArgoCD Fundamentals
description: Test your basic knowledge of ArgoCD continuous delivery tool

questions:
  - id: argocd_b1
    question: What is ArgoCD?
    options:
      - A GitOps continuous delivery tool for Kubernetes
      - A container runtime
      - A monitoring solution
      - A version control system
    correct_answer: 0
    explanation: ArgoCD is a declarative GitOps continuous delivery tool for Kubernetes that follows the GitOps pattern of using Git repositories as the source of truth for defining the desired application state.
    source: https://argo-cd.readthedocs.io/en/stable/

  - id: argocd_b2
    question: What is GitOps?
    options:
      - A practice where the desired state of infrastructure is stored in Git
      - A Git branching strategy
      - A deployment tool
      - A monitoring pattern
    correct_answer: 0
    explanation: GitOps is a way of implementing Continuous Deployment for cloud native applications by using Git as the single source of truth for declarative infrastructure and applications.
    source: https://argo-cd.readthedocs.io/en/stable/user-guide/concepts/

  - id: argocd_b3
    question: How does ArgoCD monitor the state of an application?
    options:
      - By continuously comparing the live state with the desired state in Git
      - By using external monitoring tools
      - By manual checks only
      - By running tests
    correct_answer: 0
    explanation: ArgoCD continuously monitors running applications and compares their live state against the desired state specified in the Git repository.
    source: https://argo-cd.readthedocs.io/en/stable/core-concepts/

  - id: argocd_b4
    question: What is an Application in ArgoCD?
    options:
      - A Custom Resource that defines the source repo and destination cluster
      - A Kubernetes pod
      - A Git repository
      - A deployment strategy
    correct_answer: 0
    explanation: An Application in ArgoCD is a Kubernetes Custom Resource (CR) that defines the source repository, path, target cluster, and other deployment configurations.
    source: https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/

  - id: argocd_b5
    question: What are the main components of ArgoCD?
    options:
      - API server, repository server, and application controller
      - Frontend and backend only
      - Database and cache
      - Web interface only
    correct_answer: 0
    explanation: ArgoCD consists of three main components - API server (handles requests), repository server (manages Git repositories), and application controller (monitors and syncs applications).
    source: https://argo-cd.readthedocs.io/en/stable/operator-manual/architecture/

  - id: argocd_b6
    question: How do you access the ArgoCD UI?
    options:
      - Through a web interface exposed by the argocd-server service
      - Only through command line
      - Through SSH only
      - Through API only
    correct_answer: 0
    explanation: ArgoCD provides a web-based UI that is exposed through the argocd-server service, allowing users to view and manage applications through a graphical interface.
    source: https://argo-cd.readthedocs.io/en/stable/getting_started/

  - id: argocd_b7
    question: What is the purpose of the ArgoCD CLI?
    options:
      - To manage ArgoCD applications and configurations from the command line
      - To manage Git repositories only
      - To monitor cluster health
      - To deploy containers
    correct_answer: 0
    explanation: The ArgoCD CLI provides command-line access to ArgoCD features, allowing users to manage applications, configurations, and perform various operations from the terminal.
    source: https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd/

  - id: argocd_b8
    question: What is an Application Project in ArgoCD?
    options:
      - A logical grouping of applications with specific rules and constraints
      - A Git project
      - A Kubernetes namespace
      - A deployment environment
    correct_answer: 0
    explanation: An Application Project in ArgoCD is a logical grouping of applications that provides a way to configure access rules, resource constraints, and other settings for a group of applications.
    source: https://argo-cd.readthedocs.io/en/stable/user-guide/projects/

  - id: argocd_b9
    question: What is the default sync policy in ArgoCD?
    options:
      - Manual sync
      - Automatic sync
      - Force sync
      - Selective sync
    correct_answer: 0
    explanation: By default, ArgoCD uses manual sync policy, meaning users need to explicitly approve synchronization of applications with their Git source.
    source: https://argo-cd.readthedocs.io/en/stable/user-guide/auto_sync/

  - id: argocd_b10
    question: What manifest formats does ArgoCD support?
    options:
      - Kubernetes YAML, Kustomize, Helm, and Jsonnet
      - Only Kubernetes YAML
      - Only Helm charts
      - Only Kustomize
    correct_answer: 0
    explanation: ArgoCD supports multiple manifest formats including plain Kubernetes YAML files, Helm charts, Kustomize applications, and Jsonnet.
    source: https://argo-cd.readthedocs.io/en/stable/user-guide/application_sources/ 