title: ArgoCD Advanced Operations
description: Test your intermediate knowledge of ArgoCD and GitOps practices
category: argocd
level: intermediate
questions:
  - id: argocd_i1
    question: What is the purpose of the 'sync-wave' annotation in ArgoCD?
    options:
      - To control the order in which resources are synchronized during deployments
      - To set the frequency for synchronizing resources across applications
      - To define wave-based deployment strategies for rolling updates
      - To enable synchronization of resources across multiple clusters
    correct_answer: 0
    explanation: The sync-wave annotation allows you to control the order in which resources are synchronized by assigning them to different waves, with lower numbered waves being processed first.
    source: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-waves/

  - id: argocd_i2
    question: How can you implement automated sync in ArgoCD?
    options:
      - By setting automated sync policies directly in the Application specifications
      - By configuring external automation tools to trigger synchronization
      - By scheduling regular synchronization using cron job configurations
      - By relying solely on manual triggers initiated by administrators
    correct_answer: 0
    explanation: Automated sync can be implemented by configuring the automated sync policy in the Application spec, including options for prune and self-heal.
    source: https://argo-cd.readthedocs.io/en/stable/user-guide/auto_sync/

  - id: argocd_i3
    question: What is the purpose of the 'argocd-image-updater'?
    options:
      - To automatically update container image tags in Git repositories
      - To build and publish container images for application deployments
      - To scan container images for vulnerabilities and security issues
      - To cache frequently used container images for improved performance
    correct_answer: 0
    explanation: The argocd-image-updater is a tool that automatically updates container image versions in Git repositories based on specified rules and policies.
    source: https://argocd-image-updater.readthedocs.io/en/stable/

  - id: argocd_i4
    question: How does ArgoCD handle RBAC (Role-Based Access Control)?
    options:
      - By implementing built-in RBAC policies for projects and resource access
      - By delegating RBAC entirely to external systems for management
      - By relying on manual user management for controlling access levels
      - By defining static rules for user permissions without dynamic adjustments
    correct_answer: 0
    explanation: ArgoCD implements RBAC through projects and policies, allowing fine-grained control over who can access and modify applications and resources.
    source: https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/

  - id: argocd_i5
    question: What is the purpose of 'resource hooks' in ArgoCD?
    options:
      - To execute custom actions during different phases of the sync operation
      - To manage and allocate resources more effectively in clusters
      - To continuously monitor the usage and status of application resources
      - To create automatic backups of resources during deployment updates
    correct_answer: 0
    explanation: Resource hooks allow you to run custom actions during different phases of the sync operation, such as PreSync, Sync, PostSync, and SyncFail.
    source: https://argo-cd.readthedocs.io/en/stable/user-guide/resource_hooks/

  - id: argocd_i6
    question: How can you manage secrets in ArgoCD?
    options:
      - By using tools like Bitnami Sealed Secrets or HashiCorp Vault for secure management
      - By relying on plain Kubernetes secrets stored in cluster configurations
      - By configuring environment variables directly in application manifests
      - By storing sensitive data in external storage systems exclusively
    correct_answer: 0
    explanation: ArgoCD can work with various secret management solutions like Bitnami Sealed Secrets, HashiCorp Vault, or other tools to securely manage sensitive information.
    source: https://argo-cd.readthedocs.io/en/stable/operator-manual/secret-management/

  - id: argocd_i7
    question: What is the purpose of the 'app of apps' pattern in ArgoCD?
    options:
      - To manage multiple related applications using a single parent application definition
      - To create periodic backups of applications managed by ArgoCD
      - To provide a centralized dashboard for monitoring application health
      - To enable deployment of applications across multiple environments
    correct_answer: 0
    explanation: The 'app of apps' pattern allows you to manage multiple ArgoCD applications using a single parent application, enabling easier management of complex deployments.
    source: https://argo-cd.readthedocs.io/en/stable/operator-manual/cluster-bootstrapping/

  - id: argocd_i8
    question: How can you implement Progressive Delivery with ArgoCD?
    options:
      - By integrating with Argo Rollouts for advanced deployment strategies
      - By relying on native Kubernetes deployment configurations exclusively
      - By executing deployments manually without additional integrations
      - By utilizing external tools for orchestrating complex delivery workflows
    correct_answer: 0
    explanation: Progressive Delivery can be implemented by integrating ArgoCD with Argo Rollouts, which provides advanced deployment strategies like canary and blue-green deployments.
    source: https://argo-cd.readthedocs.io/en/stable/operator-manual/progressive-delivery/

  - id: argocd_i9
    question: What is the purpose of ApplicationSets in ArgoCD?
    options:
      - To automate the creation of similar applications using templates and generators
      - To group multiple applications for easier access and management
      - To provide real-time monitoring and reporting on application sets
      - To create and manage backups for large-scale applications
    correct_answer: 0
    explanation: ApplicationSets allow you to automatically create multiple similar applications based on templates and generators, making it easier to manage applications across multiple clusters or environments.
    source: https://argo-cd.readthedocs.io/en/stable/user-guide/application-set/

  - id: argocd_i10
    question: How can you implement custom health checks in ArgoCD?
    options:
      - By writing Lua scripts to define specific health check logic for resources
      - By relying solely on external monitoring tools for health validations
      - By conducting manual checks to determine the status of applications
      - By embedding health logic directly into the application source code
    correct_answer: 0
    explanation: Custom health checks can be implemented using Lua scripts that define specific logic for determining the health status of resources.
    source: https://argo-cd.readthedocs.io/en/stable/operator-manual/health/
