id: docker_advanced
category: docker
level: advanced
title: Advanced Docker Concepts
description: Master advanced Docker concepts, security, and optimization techniques

questions:
  - id: q1
    question: How does Docker's seccomp profile enhance container security?
    options:
      - By restricting the system calls available to containers based on a security profile
      - By encrypting container data
      - By scanning for vulnerabilities
      - By isolating networks
    explanation: Docker's seccomp (secure computing mode) profiles enhance security by limiting which system calls a container can make to the host kernel, reducing the potential attack surface.
    source: "Docker Documentation - https://docs.docker.com/engine/security/seccomp/"
    correct_answer: 0

  - id: q2
    question: What are the implications of using --privileged flag with Docker containers?
    options:
      - It gives containers full access to host devices and kernel capabilities, potentially compromising security
      - It only affects network access
      - It only impacts storage access
      - It only changes container names
    explanation: The --privileged flag gives containers nearly all the same capabilities as processes running on the host, which can be dangerous as it bypasses security restrictions.
    source: "Docker Documentation - https://docs.docker.com/engine/reference/run/#runtime-privilege-and-linux-capabilities"
    correct_answer: 0

  - id: q3
    question: How does Docker's copy-on-write (CoW) storage driver optimize container storage?
    options:
      - By sharing common layers between images and only copying data when it's modified
      - By compressing all data
      - By using external storage
      - By limiting storage size
    explanation: The copy-on-write storage driver optimizes storage and memory use by sharing common image layers between containers and only copying data when it's modified.
    source: "Docker Documentation - https://docs.docker.com/storage/storagedriver/"
    correct_answer: 0

  - id: q4
    question: What is the purpose of Docker's experimental features and how are they managed?
    options:
      - To test new features before they become stable by enabling them through daemon configuration
      - To improve performance automatically
      - To add security features
      - To modify existing features
    explanation: Experimental features allow testing of new Docker functionality before it becomes stable, managed through daemon configuration and providing feedback for feature development.
    source: "Docker Documentation - https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-configuration-file"
    correct_answer: 0

  - id: q5
    question: How does Docker handle inter-container communication security in overlay networks?
    options:
      - By implementing IPSEC encryption and managing keys through the swarm control plane
      - By using basic authentication
      - By disabling all communication
      - By using public networks
    explanation: Docker secures inter-container communication in overlay networks using IPSEC encryption, with automatic key management handled by the swarm control plane.
    source: "Docker Documentation - https://docs.docker.com/network/overlay/#encrypt-traffic-on-an-overlay-network"
    correct_answer: 0

  - id: q6
    question: What role do capabilities play in Docker container security?
    options:
      - They provide fine-grained control over privileged operations without giving full root access
      - They only affect network access
      - They only control storage
      - They only impact logging
    explanation: Linux capabilities in Docker provide fine-grained control over privileged operations, allowing containers to perform specific privileged operations without full root access.
    source: "Docker Documentation - https://docs.docker.com/engine/security/security/#linux-kernel-capabilities"
    correct_answer: 0

  - id: q7
    question: How does Docker's built-in orchestration handle node failure in a swarm?
    options:
      - By automatically rescheduling containers from failed nodes to healthy nodes
      - By shutting down the cluster
      - By ignoring the failure
      - By requiring manual intervention
    explanation: Docker swarm mode automatically detects node failures and reschedules containers from failed nodes to healthy nodes, maintaining service availability.
    source: "Docker Documentation - https://docs.docker.com/engine/swarm/how-swarm-mode-works/nodes/"
    correct_answer: 0

  - id: q8
    question: What are the security implications of using Docker socket mounting?
    options:
      - It can give containers complete control over the Docker daemon, potentially compromising host security
      - It only affects logging
      - It only impacts performance
      - It only changes networking
    explanation: Mounting the Docker socket gives containers access to the Docker daemon API, potentially allowing them to create, modify, or delete containers and access host resources.
    source: "Docker Documentation - https://docs.docker.com/engine/security/protect-access/"
    correct_answer: 0

  - id: q9
    question: How does Docker's resource quotas mechanism work at the daemon level?
    options:
      - By setting system-wide limits on resources like CPU, memory, and storage that containers can use
      - By affecting single containers only
      - By limiting network access only
      - By restricting image downloads
    explanation: Docker daemon-level resource quotas allow setting system-wide limits on resources that containers can consume, helping prevent resource exhaustion on the host.
    source: "Docker Documentation - https://docs.docker.com/config/containers/resource_constraints/"
    correct_answer: 0

  - id: q10
    question: What are the implications of using user namespaces in Docker?
    options:
      - They map container user IDs to different host IDs, providing additional security isolation
      - They only affect network isolation
      - They only impact storage access
      - They only change container names
    explanation: User namespaces provide an additional layer of security by mapping container user IDs to different host IDs, reducing the risk of privilege escalation attacks.
    source: "Docker Documentation - https://docs.docker.com/engine/security/userns-remap/"
    correct_answer: 0 