id: docker_intermediate
category: docker
level: intermediate
title: Intermediate Docker Concepts
description: Explore intermediate concepts and best practices in Docker containerization

questions:
  - id: q1
    question: What is the purpose of multi-stage builds in Docker?
    options:
      - To reduce the final image size by using multiple stages to separate build and runtime dependencies
      - To increase the speed of building and deploying applications with Docker
      - To improve security scanning capabilities within the Docker ecosystem
      - To simplify the deployment process for complex Dockerized applications
    explanation: Multi-stage builds allow you to use multiple stages in a single Dockerfile, where you can copy specific artifacts from one stage to another, resulting in a smaller final image that doesn't include build dependencies.
    source: "Docker Documentation - https://docs.docker.com/develop/develop-images/multistage-build/"
    correct_answer: 0

  - id: q2
    question: How do Docker networks in bridge mode handle container communication?
    options:
      - By creating an internal network where containers can communicate using their names or aliases
      - By exposing all container ports to the host for external communication
      - By using the host's network directly without additional configuration
      - By requiring manual IP configuration for container communication
    explanation: Bridge networks create an internal network where containers can communicate with each other using container names or aliases as DNS names, while still being isolated from the host network.
    source: "Docker Documentation - https://docs.docker.com/network/bridge/"
    correct_answer: 0

  - id: q3
    question: What is the purpose of Docker health checks?
    options:
      - To verify if a container is functioning correctly by running a test command
      - To scan running containers for known vulnerabilities and threats
      - To monitor the resource usage of running Docker containers
      - To backup container data to ensure disaster recovery capabilities
    explanation: Health checks allow Docker to test if a container is working correctly by running a command inside the container, helping orchestrators make decisions about container availability.
    source: "Docker Documentation - https://docs.docker.com/engine/reference/builder/#healthcheck"
    correct_answer: 0

  - id: q4
    question: How do Docker volumes differ from bind mounts?
    options:
      - Volumes are managed by Docker and provide better portability and backup options
      - Volumes are slower than bind mounts due to additional management overhead
      - Volumes require more configuration than bind mounts for basic use cases
      - Volumes use more disk space compared to bind mounts for similar data storage
    explanation: Docker volumes are managed by Docker and provide better portability, backup options, and sharing between containers compared to bind mounts, which are direct mappings to host filesystem paths.
    source: "Docker Documentation - https://docs.docker.com/storage/volumes/"
    correct_answer: 0

  - id: q5
    question: What is the purpose of Docker content trust?
    options:
      - To ensure the integrity and publisher of container images through digital signatures
      - To compress Docker container images to optimize storage usage
      - To scan Docker images and containers for vulnerabilities
      - To improve build performance for complex containerized applications
    explanation: Docker content trust provides digital signing for container images, allowing you to verify the integrity and publisher of images before running them.
    source: "Docker Documentation - https://docs.docker.com/engine/security/trust/"
    correct_answer: 0

  - id: q6
    question: How do Docker layer caching mechanisms work?
    options:
      - By reusing unchanged layers from previous builds to speed up build time
      - By compressing all layers during the build process to optimize storage
      - By removing intermediate layers to streamline the final image creation
      - By combining all layers into a single layer for deployment simplicity
    explanation: Docker caches layers from previous builds and reuses them if the corresponding Dockerfile instruction and its context haven't changed, significantly speeding up build times.
    source: "Docker Documentation - https://docs.docker.com/develop/develop-images/dockerfile_best-practices/"
    correct_answer: 0

  - id: q7
    question: What is the purpose of Docker secrets?
    options:
      - To securely store and distribute sensitive data to containers that need it
      - To encrypt Docker container images and runtime environments
      - To secure network communications between running containers
      - To protect volume data from unauthorized access or modification
    explanation: Docker secrets provide a secure way to store and distribute sensitive data like passwords and SSL certificates to containers that need them, without exposing the data in the image or container configuration.
    source: "Docker Documentation - https://docs.docker.com/engine/swarm/secrets/"
    correct_answer: 0

  - id: q8
    question: How does Docker handle container logging?
    options:
      - By capturing stdout and stderr from the container and providing logging drivers for different destinations
      - By writing all container logs directly to the host system's log storage
      - By requiring external logging agents to monitor container activities
      - By storing container logs in volumes for later analysis and backup
    explanation: Docker captures the standard output and error streams from containers and provides various logging drivers to send these logs to different destinations like files, syslog, or logging services.
    source: "Docker Documentation - https://docs.docker.com/config/containers/logging/"
    correct_answer: 0

  - id: q9
    question: What is the purpose of Docker buildx?
    options:
      - To build images for multiple platforms and architectures from a single build
      - To improve the performance and speed of building containerized applications
      - To reduce the size of Docker images by optimizing build layers
      - To scan Docker builds for security vulnerabilities during the build process
    explanation: Docker buildx is a CLI plugin that extends Docker build with additional features like building for multiple platforms from a single build command and enhanced build capabilities.
    source: "Docker Documentation - https://docs.docker.com/buildx/working-with-buildx/"
    correct_answer: 0

  - id: q10
    question: How do Docker overlay networks facilitate container communication across hosts?
    options:
      - By creating a distributed network that spans multiple Docker hosts seamlessly
      - By using host networking to enable communication between containers
      - By requiring manual routing and configuration for cross-host communication
      - By exposing all container ports to the host for external communication
    explanation: Overlay networks create a distributed network across multiple Docker hosts, allowing containers on different hosts to communicate as if they were on the same network.
    source: "Docker Documentation - https://docs.docker.com/network/overlay/"
    correct_answer: 0
