id: docker_compose_basics
category: docker_compose
level: beginner
title: Docker Compose Fundamentals
description: Test your basic knowledge of Docker Compose

questions:
  - id: docker_compose_b1
    question: What is Docker Compose?
    options:
      - A tool for defining and running multi-container Docker applications
      - A container runtime for executing isolated processes
      - A monitoring solution for Docker environments
      - A version control system for managing application code
    correct_answer: 0
    explanation: Docker Compose is a tool that helps you define and share multi-container applications using a YAML file to configure your application's services.
    source: https://docs.docker.com/compose/

  - id: docker_compose_b2
    question: What is the default filename for a Docker Compose configuration file?
    options:
      - docker-compose.yml
      - compose.yaml
      - docker.yaml
      - containers.yml
    correct_answer: 0
    explanation: The default filename for a Docker Compose configuration file is docker-compose.yml, although docker-compose.yaml is also accepted.
    source: https://docs.docker.com/compose/compose-file/

  - id: docker_compose_b3
    question: What command is used to start services defined in a Docker Compose file?
    options:
      - docker-compose up
      - docker-compose start
      - docker-compose run
      - docker-compose launch
    correct_answer: 0
    explanation: The docker-compose up command is used to create and start containers for all services defined in the docker-compose.yml file.
    source: https://docs.docker.com/compose/reference/up/

  - id: docker_compose_b4
    question: How do you define a service in Docker Compose?
    options:
      - Using the 'services' section in the compose file
      - Using a Dockerfile to set up the service
      - Using environment variables to specify service details
      - Using command line arguments to configure services
    correct_answer: 0
    explanation: Services in Docker Compose are defined under the 'services' section in the compose file, where you specify container configurations.
    source: https://docs.docker.com/compose/compose-file/compose-file-v3/#service-configuration-reference

  - id: docker_compose_b5
    question: What command stops and removes all containers created by docker-compose up?
    options:
      - docker-compose down
      - docker-compose stop
      - docker-compose remove
      - docker-compose clean
    correct_answer: 0
    explanation: The docker-compose down command stops containers and removes containers, networks, volumes, and images created by docker-compose up.
    source: https://docs.docker.com/compose/reference/down/

  - id: docker_compose_b6
    question: How do you specify the image for a service in Docker Compose?
    options:
      - Using the 'image' key in the service definition
      - Using the 'container' key in the YAML file
      - Using the 'source' key to link the image
      - Using the 'from' key to set the image source
    correct_answer: 0
    explanation: The 'image' key in a service definition specifies which Docker image to use for creating the service's containers.
    source: https://docs.docker.com/compose/compose-file/compose-file-v3/#image

  - id: docker_compose_b7
    question: How do you define environment variables in Docker Compose?
    options:
      - Using the 'environment' or 'env_file' keys for configuration
      - Only through command line options for running containers
      - Only using system environment variables configured beforehand
      - Only in Dockerfile for service-specific environment variables
    correct_answer: 0
    explanation: Environment variables can be defined using the 'environment' key for inline variables or 'env_file' to specify a file containing the variables.
    source: https://docs.docker.com/compose/environment-variables/

  - id: docker_compose_b8
    question: What is the purpose of the 'ports' section in a service definition?
    options:
      - To map container ports to host ports for external access
      - To define internal ports used by the container services
      - To set network speeds for Docker container communication
      - To configure firewalls for protecting service ports
    correct_answer: 0
    explanation: The 'ports' section is used to map ports from the container to the host machine, allowing external access to services running in the container.
    source: https://docs.docker.com/compose/compose-file/compose-file-v3/#ports

  - id: docker_compose_b9
    question: How do you specify dependencies between services?
    options:
      - Using the 'depends_on' key in the service configuration
      - Using the 'requires' key to define service dependencies
      - Using the 'needs' key to specify service startup order
      - Using the 'after' key to delay dependent service startup
    correct_answer: 0
    explanation: The 'depends_on' key expresses dependency between services, ensuring they start in the correct order.
    source: https://docs.docker.com/compose/compose-file/compose-file-v3/#depends_on

  - id: docker_compose_b10
    question: What command shows the logs of all running services?
    options:
      - docker-compose logs
      - docker-compose show-logs
      - docker-compose output
      - docker-compose status
    correct_answer: 0
    explanation: The docker-compose logs command displays log output from services defined in the docker-compose.yml file.
    source: https://docs.docker.com/compose/reference/logs/
