title: Docker Compose Advanced Operations
description: Test your intermediate knowledge of Docker Compose
category: docker_compose
level: intermediate

questions:
  - id: docker_compose_i1
    question: What is the purpose of the 'build' context in Docker Compose?
    options:
      - To specify the build configuration for creating a custom image
      - To configure runtime environment variables for services
      - To set up network configurations for service communication
      - To manage and configure container volumes for storage
    correct_answer: 0
    explanation: The 'build' context allows you to specify a path to a Dockerfile and additional build settings for creating a custom image for a service.
    source: https://docs.docker.com/compose/compose-file/compose-file-v3/#build

  - id: docker_compose_i2
    question: How do you override default Compose configurations?
    options:
      - Using multiple compose files with the -f flag during execution
      - By editing the primary configuration file directly every time
      - By defining override configurations through environment variables
      - Using specific command line arguments to modify behaviors
    correct_answer: 0
    explanation: Docker Compose allows you to override configurations using multiple compose files with the -f flag, following a specific merge strategy.
    source: https://docs.docker.com/compose/extends/

  - id: docker_compose_i3
    question: What is the purpose of the 'restart' policy in Docker Compose?
    options:
      - To define how containers should be restarted when they exit unexpectedly
      - To set up scheduled restarts for containerized services
      - To manually restart services when failures occur
      - To entirely prevent containers from restarting after failures
    correct_answer: 0
    explanation: The 'restart' policy specifies how containers should be restarted when they exit, with options like 'no', 'always', 'on-failure', and 'unless-stopped'.
    source: https://docs.docker.com/compose/compose-file/compose-file-v3/#restart

  - id: docker_compose_i4
    question: How do you implement health checks in Docker Compose?
    options:
      - Using the 'healthcheck' configuration in the service definition section
      - By relying solely on external monitoring tools to assess health
      - By defining checks directly within environment variables
      - By using manual inspection to ensure service availability
    correct_answer: 0
    explanation: The 'healthcheck' configuration allows you to specify commands to check container health and configure check intervals and timeouts.
    source: https://docs.docker.com/compose/compose-file/compose-file-v3/#healthcheck

  - id: docker_compose_i5
    question: What is the purpose of networks with aliases in Docker Compose?
    options:
      - To provide alternative hostnames for services within specific networks
      - To configure and control network speeds for connected services
      - To set up and manage private VPNs within the environment
      - To handle IP address allocation dynamically for each service
    correct_answer: 0
    explanation: Network aliases allow you to create alternative hostnames for services when connected to specific networks, useful for service discovery.
    source: https://docs.docker.com/compose/compose-file/compose-file-v3/#aliases

  - id: docker_compose_i6
    question: How do you manage secrets in Docker Compose?
    options:
      - Using the 'secrets' configuration to define and mount sensitive data
      - By setting sensitive information through environment variables only
      - By hardcoding secure data within plain text configuration files
      - By relying entirely on manual encryption mechanisms
    correct_answer: 0
    explanation: The 'secrets' configuration allows you to manage sensitive data by defining secrets and mounting them into services securely.
    source: https://docs.docker.com/compose/compose-file/compose-file-v3/#secrets

  - id: docker_compose_i7
    question: What is the purpose of the 'extends' keyword in Docker Compose?
    options:
      - To share and reuse common configurations across multiple services
      - To extend specific network functionalities for certain services
      - To allow extension of volume configurations for better storage
      - To enhance environment variable management dynamically
    correct_answer: 0
    explanation: The 'extends' keyword allows you to share common configurations between different services and compose files.
    source: https://docs.docker.com/compose/extends/#extending-services

  - id: docker_compose_i8
    question: How do you implement resource constraints in Docker Compose?
    options:
      - Using deploy or resources configurations to limit CPU and memory usage
      - By defining system-level restrictions through environment variables
      - By utilizing external tools to monitor resource consumption
      - By manually inspecting container usage and applying constraints
    correct_answer: 0
    explanation: Resource constraints can be implemented using deploy or resources configurations to limit CPU and memory usage of containers.
    source: https://docs.docker.com/compose/compose-file/compose-file-v3/#resources

  - id: docker_compose_i9
    question: What is the purpose of the 'configs' section in Docker Compose?
    options:
      - To manage and mount configuration files into containers securely
      - To set environment variables dynamically for runtime
      - To configure and monitor network properties for services
      - To manage and store application logs centrally
    correct_answer: 0
    explanation: The 'configs' section allows you to manage configuration files that can be mounted into services, similar to secrets but for non-sensitive data.
    source: https://docs.docker.com/compose/compose-file/compose-file-v3/#configs

  - id: docker_compose_i10
    question: How do you implement rolling updates in Docker Compose?
    options:
      - Using update_config in the deploy section for gradual updates
      - By manually replacing and restarting containers incrementally
      - By applying basic restart policies after updating the service
      - By completely stopping and restarting all affected services
    correct_answer: 0
    explanation: Rolling updates can be configured using the update_config settings in the deploy section, specifying parallelism, delay, and failure action.
    source: https://docs.docker.com/compose/compose-file/compose-file-v3/#update_config
